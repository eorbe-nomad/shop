#애플리케이션 포트 설정
server.port=8080


#MySQL 연결 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/shop?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=MyP@ssw0rd1!

#실행되는 쿼리 콘솔 출력
spring.jpa.properties.hibernate.show_sql=true

#콘솔창에 출력되는 쿼리를 가독성이 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true

#쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql=trace

# 아래 옵션을 통해 애플리케이션 구동 시 JPA의 데이터베이스 초기화 전략을 설정할 수 있으며,
# 총 5가지의 옵션이 있다.
# 1) none : 사용하지 않음
# 2) create : 기존 테이블 삭제 후 테이블 생성
# 3) create-drop : 기존 테이블 삭제 후 테이블 생성, 종료 시점에 테이블 삭제
# 4) update : 변경된 스키마 적용
# 5) validate : 엔티티와 테이블 정상 매핑 확인
# P.s>
# update 옵션에서 컬럼 삭제는 엄청난 문제를 발생시킬 수 있기 때문에 컬럼 추가만 반영된다.
# 개발 초기에는 create 또는 update 옵션을 이용해서 익숙해지는데 집중하고 추후에 validate 옵션을
# 설정해 주는 것이 좋다.
# 주의)
# 스테이징, 운영환경에서는 절대로 create, create-drop, update를 사용하면 안된다.
# 스테이징이나 운영 서버에서는 테이블 생성 및 컬럼 추가, 삭제, 변경은 데이터베이스에 직접하며,
# none을 사용하거나 validate를 이용하여 정상적인 매핑 관계만 확인한다.
# 스테이징 : 운영환경과 거의 동일한 환경으로 구성하여 운영환경에 배포하기 전 여러가지 기능을 검증하는 환경이다.
spring.jpa.hibernate.ddl-auto=create

spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
